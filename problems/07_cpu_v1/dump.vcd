$date
	Wed Apr 24 05:09:14 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$scope module cpu_top $end
$var wire 1 ! clk $end
$var wire 32 " instr_data [31:0] $end
$var wire 32 # instr_addr [31:0] $end
$scope module core $end
$var wire 32 $ alu_b_src [31:0] $end
$var wire 1 ! clk $end
$var wire 32 % instr [31:0] $end
$var wire 32 & instr_addr [31:0] $end
$var wire 32 ' last_pc [31:0] $end
$var wire 5 ( rf_raddr0 [4:0] $end
$var wire 5 ) rf_raddr1 [4:0] $end
$var wire 5 * rf_waddr [4:0] $end
$var wire 32 + rf_wdata [31:0] $end
$var wire 5 , rs2 [4:0] $end
$var wire 5 - rs1 [4:0] $end
$var wire 1 . rf_we $end
$var wire 32 / rf_rdata1 [31:0] $end
$var wire 32 0 rf_rdata0 [31:0] $end
$var wire 5 1 rd [4:0] $end
$var wire 32 2 pc_next [31:0] $end
$var wire 32 3 instr_data [31:0] $end
$var wire 32 4 imm32 [31:0] $end
$var wire 12 5 imm12 [11:0] $end
$var wire 32 6 alu_result [31:0] $end
$var wire 3 7 alu_op [2:0] $end
$var reg 32 8 pc [31:0] $end
$scope module alu $end
$var wire 32 9 src_b [31:0] $end
$var wire 32 : src_a [31:0] $end
$var wire 3 ; op [2:0] $end
$var reg 32 < res [31:0] $end
$upscope $end
$scope module control $end
$var wire 32 = instr [31:0] $end
$var wire 7 > opcode [6:0] $end
$var wire 3 ? funct3 [2:0] $end
$var reg 3 @ alu_op [2:0] $end
$var reg 12 A imm12 [11:0] $end
$var reg 1 . rf_we $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 B raddr0 [4:0] $end
$var wire 5 C raddr1 [4:0] $end
$var wire 32 D rdata0 [31:0] $end
$var wire 32 E rdata1 [31:0] $end
$var wire 5 F waddr [4:0] $end
$var wire 32 G wdata [31:0] $end
$var wire 1 . we $end
$scope begin genblk2[0] $end
$var parameter 2 H i $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 I i $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 J i $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 K i $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 L i $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 M i $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 N i $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 O i $end
$upscope $end
$scope begin genblk2[8] $end
$var parameter 5 P i $end
$upscope $end
$scope begin genblk2[9] $end
$var parameter 5 Q i $end
$upscope $end
$scope begin genblk2[10] $end
$var parameter 5 R i $end
$upscope $end
$scope begin genblk2[11] $end
$var parameter 5 S i $end
$upscope $end
$scope begin genblk2[12] $end
$var parameter 5 T i $end
$upscope $end
$scope begin genblk2[13] $end
$var parameter 5 U i $end
$upscope $end
$scope begin genblk2[14] $end
$var parameter 5 V i $end
$upscope $end
$scope begin genblk2[15] $end
$var parameter 5 W i $end
$upscope $end
$scope begin genblk2[16] $end
$var parameter 6 X i $end
$upscope $end
$scope begin genblk2[17] $end
$var parameter 6 Y i $end
$upscope $end
$scope begin genblk2[18] $end
$var parameter 6 Z i $end
$upscope $end
$scope begin genblk2[19] $end
$var parameter 6 [ i $end
$upscope $end
$scope begin genblk2[20] $end
$var parameter 6 \ i $end
$upscope $end
$scope begin genblk2[21] $end
$var parameter 6 ] i $end
$upscope $end
$scope begin genblk2[22] $end
$var parameter 6 ^ i $end
$upscope $end
$scope begin genblk2[23] $end
$var parameter 6 _ i $end
$upscope $end
$scope begin genblk2[24] $end
$var parameter 6 ` i $end
$upscope $end
$scope begin genblk2[25] $end
$var parameter 6 a i $end
$upscope $end
$scope begin genblk2[26] $end
$var parameter 6 b i $end
$upscope $end
$scope begin genblk2[27] $end
$var parameter 6 c i $end
$upscope $end
$scope begin genblk2[28] $end
$var parameter 6 d i $end
$upscope $end
$scope begin genblk2[29] $end
$var parameter 6 e i $end
$upscope $end
$scope begin genblk2[30] $end
$var parameter 6 f i $end
$upscope $end
$scope begin reg_init[0] $end
$var parameter 2 g i $end
$upscope $end
$scope begin reg_init[1] $end
$var parameter 2 h i $end
$upscope $end
$scope begin reg_init[2] $end
$var parameter 3 i i $end
$upscope $end
$scope begin reg_init[3] $end
$var parameter 3 j i $end
$upscope $end
$scope begin reg_init[4] $end
$var parameter 4 k i $end
$upscope $end
$scope begin reg_init[5] $end
$var parameter 4 l i $end
$upscope $end
$scope begin reg_init[6] $end
$var parameter 4 m i $end
$upscope $end
$scope begin reg_init[7] $end
$var parameter 4 n i $end
$upscope $end
$scope begin reg_init[8] $end
$var parameter 5 o i $end
$upscope $end
$scope begin reg_init[9] $end
$var parameter 5 p i $end
$upscope $end
$scope begin reg_init[10] $end
$var parameter 5 q i $end
$upscope $end
$scope begin reg_init[11] $end
$var parameter 5 r i $end
$upscope $end
$scope begin reg_init[12] $end
$var parameter 5 s i $end
$upscope $end
$scope begin reg_init[13] $end
$var parameter 5 t i $end
$upscope $end
$scope begin reg_init[14] $end
$var parameter 5 u i $end
$upscope $end
$scope begin reg_init[15] $end
$var parameter 5 v i $end
$upscope $end
$scope begin reg_init[16] $end
$var parameter 6 w i $end
$upscope $end
$scope begin reg_init[17] $end
$var parameter 6 x i $end
$upscope $end
$scope begin reg_init[18] $end
$var parameter 6 y i $end
$upscope $end
$scope begin reg_init[19] $end
$var parameter 6 z i $end
$upscope $end
$scope begin reg_init[20] $end
$var parameter 6 { i $end
$upscope $end
$scope begin reg_init[21] $end
$var parameter 6 | i $end
$upscope $end
$scope begin reg_init[22] $end
$var parameter 6 } i $end
$upscope $end
$scope begin reg_init[23] $end
$var parameter 6 ~ i $end
$upscope $end
$scope begin reg_init[24] $end
$var parameter 6 !" i $end
$upscope $end
$scope begin reg_init[25] $end
$var parameter 6 "" i $end
$upscope $end
$scope begin reg_init[26] $end
$var parameter 6 #" i $end
$upscope $end
$scope begin reg_init[27] $end
$var parameter 6 $" i $end
$upscope $end
$scope begin reg_init[28] $end
$var parameter 6 %" i $end
$upscope $end
$scope begin reg_init[29] $end
$var parameter 6 &" i $end
$upscope $end
$scope begin reg_init[30] $end
$var parameter 6 '" i $end
$upscope $end
$scope begin reg_init[31] $end
$var parameter 6 (" i $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom $end
$var wire 3 )" addr [2:0] $end
$var wire 1 ! clk $end
$var parameter 32 *" ADDR_WIDTH $end
$var parameter 32 +" WIDTH $end
$var reg 32 ," q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 +"
b11 *"
b11111 ("
b11110 '"
b11101 &"
b11100 %"
b11011 $"
b11010 #"
b11001 ""
b11000 !"
b10111 ~
b10110 }
b10101 |
b10100 {
b10011 z
b10010 y
b10001 x
b10000 w
b1111 v
b1110 u
b1101 t
b1100 s
b1011 r
b1010 q
b1001 p
b1000 o
b111 n
b110 m
b101 l
b100 k
b11 j
b10 i
b1 h
b0 g
b11110 f
b11101 e
b11100 d
b11011 c
b11010 b
b11001 a
b11000 `
b10111 _
b10110 ^
b10101 ]
b10100 \
b10011 [
b10010 Z
b10001 Y
b10000 X
b1111 W
b1110 V
b1101 U
b1100 T
b1011 S
b1010 R
b1001 Q
b1000 P
b111 O
b110 N
b101 M
b100 L
b11 K
b10 J
b1 I
b0 H
$end
#0
$dumpvars
bx ,"
b0 )"
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b11111111111111111111111111111111 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
bx 1
bx 0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
bx (
b111 '
b0 &
bx %
bx $
b0 #
bx "
0!
$end
#10
b1 )"
b101 *
b101 F
b101 1
b0 (
b0 B
b0 -
b0 /
b0 E
b1011 )
b1011 C
b1011 ,
b1011 $
b1011 9
b1011 4
b1011 5
b1011 A
b1 7
b1 ;
b1 @
1.
b10011 >
b0 ?
b1 #
b1 &
b1 2
b101100000000001010010011 %
b101100000000001010010011 =
b101100000000001010010011 "
b101100000000001010010011 3
b101100000000001010010011 ,"
b0 8
1!
#20
0!
#30
b10 )"
b10 #
b10 &
b10 2
b111 *
b111 F
b111 1
b101 (
b101 B
b101 -
b1001 )
b1001 C
b1001 ,
b1001 $
b1001 9
b1001 4
b1001 5
b1001 A
b1 7
b1 ;
b1 @
1.
b1 8
b100100101000001110010011 %
b100100101000001110010011 =
b100100101000001110010011 "
b100100101000001110010011 3
b100100101000001110010011 ,"
1!
#40
0!
#50
b11 )"
b0 *
b0 F
b0 1
b0 (
b0 B
b0 -
bx /
bx E
b0 )
b0 C
b0 ,
b0 $
b0 9
b0 4
b0 5
b0 A
b1 7
b1 ;
b1 @
1.
b11 #
b11 &
b11 2
b10011 %
b10011 =
b10011 "
b10011 3
b10011 ,"
b10 8
1!
#60
0!
#70
b100 )"
b100 #
b100 &
b100 2
b1011 *
b1011 F
b1011 1
b111 (
b111 B
b111 -
b1 7
b1 ;
b1 @
1.
b11 8
b111000010110010011 %
b111000010110010011 =
b111000010110010011 "
b111000010110010011 3
b111000010110010011 ,"
1!
#80
0!
#90
b101 )"
b111 *
b111 F
b111 1
b0 /
b0 E
b11011 )
b11011 C
b11011 ,
b11111111111111111111111111111011 $
b11111111111111111111111111111011 9
b11111111111111111111111111111011 4
b111111111011 5
b111111111011 A
b1 7
b1 ;
b1 @
1.
b101 #
b101 &
b101 2
b11111111101100111000001110010011 %
b11111111101100111000001110010011 =
b11111111101100111000001110010011 "
b11111111101100111000001110010011 3
b11111111101100111000001110010011 ,"
b100 8
1!
#100
0!
#110
b110 )"
b110 #
b110 &
b110 2
b0 *
b0 F
b0 1
b0 (
b0 B
b0 -
bx /
bx E
b0 )
b0 C
b0 ,
b0 $
b0 9
b0 4
b0 5
b0 A
b1 7
b1 ;
b1 @
1.
b101 8
b10011 %
b10011 =
b10011 "
b10011 3
b10011 ,"
1!
#120
0!
#130
b111 )"
b111 #
b111 &
b111 2
b110 8
1!
#140
0!
#150
b111 8
1!

$date
	Mon May 13 13:27:53 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$scope module cpu_top $end
$var wire 1 ! clk $end
$var wire 32 " instr_data [31:0] $end
$var wire 32 # instr_addr [31:0] $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 32 $ instr [31:0] $end
$var wire 32 % instr_addr [31:0] $end
$var wire 32 & last_pc [31:0] $end
$var wire 5 ' rf_raddr0 [4:0] $end
$var wire 5 ( rf_raddr1 [4:0] $end
$var wire 5 ) rf_waddr [4:0] $end
$var wire 32 * rf_wdata [31:0] $end
$var wire 5 + rs2 [4:0] $end
$var wire 5 , rs1 [4:0] $end
$var wire 1 - rf_we $end
$var wire 32 . rf_rdata1 [31:0] $end
$var wire 32 / rf_rdata0 [31:0] $end
$var wire 5 0 rd [4:0] $end
$var wire 32 1 pc_next [31:0] $end
$var wire 1 2 is_r_type $end
$var wire 32 3 instr_data [31:0] $end
$var wire 32 4 imm32 [31:0] $end
$var wire 12 5 imm12 [11:0] $end
$var wire 32 6 alu_result [31:0] $end
$var wire 3 7 alu_op [2:0] $end
$var wire 32 8 alu_b_src [31:0] $end
$var reg 32 9 pc [31:0] $end
$scope module alu $end
$var wire 32 : src_b [31:0] $end
$var wire 32 ; src_a [31:0] $end
$var wire 3 < op [2:0] $end
$var reg 32 = res [31:0] $end
$upscope $end
$scope module control $end
$var wire 32 > instr [31:0] $end
$var wire 7 ? opcode [6:0] $end
$var wire 7 @ funct7 [6:0] $end
$var wire 3 A funct3 [2:0] $end
$var reg 3 B alu_op [2:0] $end
$var reg 12 C imm12 [11:0] $end
$var reg 1 2 is_r_type $end
$var reg 1 - rf_we $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 D raddr0 [4:0] $end
$var wire 5 E raddr1 [4:0] $end
$var wire 5 F waddr [4:0] $end
$var wire 32 G wdata [31:0] $end
$var wire 1 - we $end
$var wire 32 H rdata1 [31:0] $end
$var wire 32 I rdata0 [31:0] $end
$scope begin reg_init[0] $end
$var parameter 2 J i $end
$upscope $end
$scope begin reg_init[1] $end
$var parameter 2 K i $end
$upscope $end
$scope begin reg_init[2] $end
$var parameter 3 L i $end
$upscope $end
$scope begin reg_init[3] $end
$var parameter 3 M i $end
$upscope $end
$scope begin reg_init[4] $end
$var parameter 4 N i $end
$upscope $end
$scope begin reg_init[5] $end
$var parameter 4 O i $end
$upscope $end
$scope begin reg_init[6] $end
$var parameter 4 P i $end
$upscope $end
$scope begin reg_init[7] $end
$var parameter 4 Q i $end
$upscope $end
$scope begin reg_init[8] $end
$var parameter 5 R i $end
$upscope $end
$scope begin reg_init[9] $end
$var parameter 5 S i $end
$upscope $end
$scope begin reg_init[10] $end
$var parameter 5 T i $end
$upscope $end
$scope begin reg_init[11] $end
$var parameter 5 U i $end
$upscope $end
$scope begin reg_init[12] $end
$var parameter 5 V i $end
$upscope $end
$scope begin reg_init[13] $end
$var parameter 5 W i $end
$upscope $end
$scope begin reg_init[14] $end
$var parameter 5 X i $end
$upscope $end
$scope begin reg_init[15] $end
$var parameter 5 Y i $end
$upscope $end
$scope begin reg_init[16] $end
$var parameter 6 Z i $end
$upscope $end
$scope begin reg_init[17] $end
$var parameter 6 [ i $end
$upscope $end
$scope begin reg_init[18] $end
$var parameter 6 \ i $end
$upscope $end
$scope begin reg_init[19] $end
$var parameter 6 ] i $end
$upscope $end
$scope begin reg_init[20] $end
$var parameter 6 ^ i $end
$upscope $end
$scope begin reg_init[21] $end
$var parameter 6 _ i $end
$upscope $end
$scope begin reg_init[22] $end
$var parameter 6 ` i $end
$upscope $end
$scope begin reg_init[23] $end
$var parameter 6 a i $end
$upscope $end
$scope begin reg_init[24] $end
$var parameter 6 b i $end
$upscope $end
$scope begin reg_init[25] $end
$var parameter 6 c i $end
$upscope $end
$scope begin reg_init[26] $end
$var parameter 6 d i $end
$upscope $end
$scope begin reg_init[27] $end
$var parameter 6 e i $end
$upscope $end
$scope begin reg_init[28] $end
$var parameter 6 f i $end
$upscope $end
$scope begin reg_init[29] $end
$var parameter 6 g i $end
$upscope $end
$scope begin reg_init[30] $end
$var parameter 6 h i $end
$upscope $end
$scope begin reg_init[31] $end
$var parameter 6 i i $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom $end
$var wire 3 j addr [2:0] $end
$var wire 1 ! clk $end
$var parameter 32 k ADDR_WIDTH $end
$var parameter 32 l WIDTH $end
$var reg 32 m q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 l
b11 k
b11111 i
b11110 h
b11101 g
b11100 f
b11011 e
b11010 d
b11001 c
b11000 b
b10111 a
b10110 `
b10101 _
b10100 ^
b10011 ]
b10010 \
b10001 [
b10000 Z
b1111 Y
b1110 X
b1101 W
b1100 V
b1011 U
b1010 T
b1001 S
b1000 R
b111 Q
b110 P
b101 O
b100 N
b11 M
b10 L
b1 K
b0 J
$end
#0
$dumpvars
bx m
b0 j
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
b11111111111111111111111111111111 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
b0 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
bx )
bx (
bx '
b111 &
b0 %
bx $
b0 #
bx "
0!
$end
#10
b1011 *
b1011 G
b1011 6
b1011 =
b0 .
b0 H
b0 /
b0 ;
b0 I
b1011 8
b1011 :
b1 j
b1011 (
b1011 E
b1011 +
b0 '
b0 D
b0 ,
b101 )
b101 F
b101 0
02
b1011 4
b1011 5
b1011 C
b1 7
b1 <
b1 B
1-
b10011 ?
b0 A
b0 @
b1 #
b1 %
b1 1
b101100000000001010010011 $
b101100000000001010010011 >
b101100000000001010010011 "
b101100000000001010010011 3
b101100000000001010010011 m
b0 9
1!
#20
0!
#30
b10100 *
b10100 G
b10100 6
b10100 =
b10 j
b1011 /
b1011 ;
b1011 I
b1001 8
b1001 :
b10 #
b10 %
b10 1
b1001 (
b1001 E
b1001 +
b101 '
b101 D
b101 ,
b111 )
b111 F
b111 0
b1001 4
b1001 5
b1001 C
b1 7
b1 <
b1 B
1-
b1 9
b100100101000001110010011 $
b100100101000001110010011 >
b100100101000001110010011 "
b100100101000001110010011 3
b100100101000001110010011 m
1!
#40
0!
#50
b0 *
b0 G
b0 6
b0 =
b0 /
b0 ;
b0 I
b0 8
b0 :
b11 j
b0 (
b0 E
b0 +
b0 '
b0 D
b0 ,
b0 )
b0 F
b0 0
b0 4
b0 5
b0 C
b1 7
b1 <
b1 B
1-
b11 #
b11 %
b11 1
b10011 $
b10011 >
b10011 "
b10011 3
b10011 m
b10 9
1!
#60
0!
#70
b10100 *
b10100 G
b10100 6
b10100 =
b100 j
b10100 /
b10100 ;
b10100 I
b100 #
b100 %
b100 1
b111 '
b111 D
b111 ,
b1011 )
b1011 F
b1011 0
b1 7
b1 <
b1 B
1-
b11 9
b111000010110010011 $
b111000010110010011 >
b111000010110010011 "
b111000010110010011 3
b111000010110010011 m
1!
#80
0!
#90
b1111 *
b1111 G
b1111 6
b1111 =
b11111111111111111111111111111011 8
b11111111111111111111111111111011 :
b101 j
b11011 (
b11011 E
b11011 +
b111 )
b111 F
b111 0
b11111111111111111111111111111011 4
b111111111011 5
b111111111011 C
b1 7
b1 <
b1 B
1-
b1111111 @
b101 #
b101 %
b101 1
b11111111101100111000001110010011 $
b11111111101100111000001110010011 >
b11111111101100111000001110010011 "
b11111111101100111000001110010011 3
b11111111101100111000001110010011 m
b100 9
1!
#100
0!
#110
b110 j
b0 8
b0 :
b0 *
b0 G
b0 6
b0 =
b110 #
b110 %
b110 1
b0 /
b0 ;
b0 I
b0 (
b0 E
b0 +
b0 '
b0 D
b0 ,
b0 )
b0 F
b0 0
b0 4
b0 5
b0 C
b1 7
b1 <
b1 B
1-
b0 @
b101 9
b10011 $
b10011 >
b10011 "
b10011 3
b10011 m
1!
#120
0!
#130
b111 j
b111 #
b111 %
b111 1
b110 9
1!
#140
0!
#150
b111 9
1!
